$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 8 # a [7:0] $end
  $var wire 8 $ b [7:0] $end
  $var wire 2 % op [1:0] $end
  $var wire 8 & o [7:0] $end
  $var wire 1 ' overflow $end
  $scope module ops $end
   $var wire 8 ( a [7:0] $end
   $var wire 8 ) b [7:0] $end
   $var wire 2 * op [1:0] $end
   $var wire 8 + o [7:0] $end
   $var wire 1 , overflow $end
   $var wire 8 - sa [7:0] $end
   $var wire 8 . sb [7:0] $end
   $var wire 8 / add_result [7:0] $end
   $var wire 8 0 sub_result [7:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b01101010 #
b01011011 $
b11 %
b01111011 &
0'
b01101010 (
b01011011 )
b11 *
b01111011 +
0,
b01101010 -
b01011011 .
b11000101 /
b00001111 0
#10
b11000010 #
b01000111 $
b01 %
1'
b11000010 (
b01000111 )
b01 *
1,
b11000010 -
b01000111 .
b00001001 /
b01111011 0
#20
b10110110 #
b11000011 $
b11 %
b11110111 &
0'
b10110110 (
b11000011 )
b11 *
b11110111 +
0,
b10110110 -
b11000011 .
b01111001 /
b11110011 0
#30
b11111110 #
b01011110 $
b10 %
b01011110 &
b11111110 (
b01011110 )
b10 *
b01011110 +
b11111110 -
b01011110 .
b01011100 /
b10100000 0
#40
b11110001 #
b10010111 $
b01 %
b01011010 &
b11110001 (
b10010111 )
b01 *
b01011010 +
b11110001 -
b10010111 .
b10001000 /
b01011010 0
#50
b01100110 #
b10000011 $
b11 %
b11100111 &
b01100110 (
b10000011 )
b11 *
b11100111 +
b01100110 -
b10000011 .
b11101001 /
b11100011 0
#60
b10001100 #
b01010101 $
b10 %
b00000100 &
b10001100 (
b01010101 )
b10 *
b00000100 +
b10001100 -
b01010101 .
b11100001 /
b00110111 0
#70
b10001110 #
b00011010 $
b00 %
b10101000 &
b10001110 (
b00011010 )
b00 *
b10101000 +
b10001110 -
b00011010 .
b10101000 /
b01110100 0
#80
b10110000 #
b01001110 $
b01 %
b01100010 &
1'
b10110000 (
b01001110 )
b01 *
b01100010 +
1,
b10110000 -
b01001110 .
b11111110 /
b01100010 0
#90
b00111100 #
b10001100 $
b10110000 &
b00111100 (
b10001100 )
b10110000 +
b00111100 -
b10001100 .
b11001000 /
b10110000 0
#100
b01111111 #
b00000001 $
b00 %
b10000000 &
b01111111 (
b00000001 )
b00 *
b10000000 +
b01111111 -
b00000001 .
b10000000 /
b01111110 0
#110
b10000000 #
b11111111 $
b01111111 &
b10000000 (
b11111111 )
b01111111 +
b10000000 -
b11111111 .
b01111111 /
b10000001 0
#120
b01111111 #
b01111110 &
0'
b01111111 (
b01111110 +
0,
b01111111 -
b01111110 /
b10000000 0
#130
b10000000 #
b00000001 $
b01 %
b01111111 &
1'
b10000000 (
b00000001 )
b01 *
b01111111 +
1,
b10000000 -
b00000001 .
b10000001 /
b01111111 0
#140
b01111111 #
b11111111 $
b10000000 &
b01111111 (
b11111111 )
b10000000 +
b01111111 -
b11111111 .
b01111110 /
b10000000 0
#150
b10000000 #
b10 %
0'
b10000000 (
b10 *
0,
b10000000 -
b01111111 /
b10000001 0
#160
b11 %
b11111111 &
b11 *
b11111111 +
#170
b00000000 #
b01 %
b00000001 &
b00000000 (
b01 *
b00000001 +
b00000000 -
b11111111 /
b00000001 0
#180
b11111111 #
b00000001 $
b00 %
b00000000 &
b11111111 (
b00000001 )
b00 *
b00000000 +
b11111111 -
b00000001 .
b00000000 /
b11111110 0
#190
b00000000 #
b00000000 $
b11 %
b00000000 (
b00000000 )
b11 *
b00000000 -
b00000000 .
b00000000 0
#210
#220
#230
#240
